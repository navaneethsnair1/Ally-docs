"use strict";
/******************************************************************************
     Copyright:: 2020- IBM, Inc

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  *****************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACReporterHTML = void 0;
const genReport_1 = require("./genReport");
class ACReporterHTML {
    name() {
        return "html";
    }
    generateReport(config, rulesets, storedReport) {
        let cloneReport = JSON.parse(JSON.stringify(storedReport.engineReport));
        let outReport = {
            report: {
                timestamp: storedReport.startScan,
                nls: cloneReport.nls,
                results: cloneReport.results.filter((issue) => issue.value[1] !== "PASS"),
                passUniqueElements: Array.from(new Set(cloneReport.results.map(result => result.path.dom))),
                counts: {
                    total: {
                        All: 0
                    }
                }
            },
            rulesets: rulesets,
            tabURL: storedReport.url
        };
        return {
            reportPath: `${storedReport.label.replace(/[:?&=]/g, "_")}.html`,
            report: (0, genReport_1.genReport)(outReport)
        };
    }
    generateSummary(_config, rulesets, _endReport, _summaryData) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
}
exports.ACReporterHTML = ACReporterHTML;
//# sourceMappingURL=ACReporterHTML.js.map